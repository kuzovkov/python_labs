Content-Type: multipart/related; start=<op.mhtml.1383077434162.6533467f3c316773@192.168.0.100>; boundary=----------4lO21l3WceamgGtdY183DO
Content-Location: http://pygame.info/docs/tut/chimp/ChimpLineByLine.html
Subject: =?utf-8?Q?Pygame=20Tutorials=20-=20Line=20By=20Line=20Chimp=20Example?=
MIME-Version: 1.0

------------4lO21l3WceamgGtdY183DO
Content-Disposition: inline; filename=ChimpLineByLine.html
Content-Type: text/html; name=ChimpLineByLine.html
Content-ID: <op.mhtml.1383077434162.6533467f3c316773@192.168.0.100>
Content-Location: http://pygame.info/docs/tut/chimp/ChimpLineByLine.html
Content-Transfer-Encoding: 8bit

<html><head><!--
TUTORIAL:Line by Line Descriptions of the Chimp Example
-->
  <title>Pygame Tutorials - Line By Line Chimp Example</title>
</head>
  <body>
             
<h1 align="center"><font size="-1">Pygame Tutorials</font><br>
     Line By Line Chimp</h1>
           
<h2 align="center">by Pete Shinners<br>
     <font size="-1">pete@shinners.org</font></h2>
           
<h3 align="center">Revision 2.2, June 17, 2004</h3>
      <br>
     <br>
             
<h2>Introduction</h2>
       In the <i>pygame</i> examples there is a simple example named, "chimp". 
  This example simulates a punchable monkey moving around a small screen with
  promises of riches and reward. The example itself is very simple, and a
bit thin on errorchecking code. This example program demonstrates many of
pygame's abilities, like creating a graphics window, loading images and sound
files, rendering TTF text, and basic event and mouse handling. <br>
     &nbsp;<br>
    The program and images can be found inside the standard source distribution
  of pygame. For version 1.3 of pygame, this example was completely rewritten
  to add a couple more features and correct error checking. This about doubled
  the size of the original example, but now gives us much more to look at,
 as well as code the I can recommend reusing for your own projects.<br>
    <br>
      This tutorial will go through the code block by block. Explaining how 
 the  code works. There will also be mention of how the code could be improved 
 and what errorchecking could help out. <br>
     &nbsp;<br>
      This is an exellent tutorial for people getting their first look at 
the  <i> pygame</i> code. Once <i>pygame</i> is fully installed, you can find
and run the chimp demo for yourself in the examples directory.        
<p align="center">     
<table border="1" bgcolor="#ddcc88" cellpadding="8">
       <tbody>
         <tr>
           <td align="center"> <font size="-1">(no, this is not a banner
ad,   its the screenshot)</font><br>
      <img src="chimpshot.gif" alt="Chimp Screenshot" width="468" height="60">
           <br>
      <a href="chimp.py.html">Full Source</a> </td>
         </tr>
                   
  </tbody>     
</table>
     </p>
        <br>
           
<h2>Import Modules</h2>
       This is the code that imports all the needed modules into your program.
  It also checks for the availability of some of the optional pygame modules.<br>
    <br>
            
<table border="1" bgcolor="#ddcc88">
      <tbody>
        <tr>
          <td>              
<pre>import os, sys
import pygame
from pygame.locals import *

if not pygame.font: print 'Warning, fonts disabled'
if not pygame.mixer: print 'Warning, sound disabled'
</pre>
        </td>
         </tr>
                   
  </tbody>     
</table>
     <br>
    First, we import the standard "os" and "sys" python modules. These allow
  us to do things like create platform independent file paths.<br>
      <br>
    In the next line, we import the pygame package. When pygame is imported
it imports all the modules belonging to pygame. Some pygame modules are optional,
and if they aren't found, their value is set to "None".<br>
      <br>
      There is a special <i>pygame</i> module named "locals". This module 
 contains  a subset of <i>pygame</i>. The members of this module are commonly
 used constants  and functions that have proven useful to put into your program's 
 global namespace.  This locals module includes functions like "Rect" to create
 a rectangle object,  and many constants like "QUIT, HWSURFACE" that are
used  to interact with the rest of <i>pygame</i>. Importing the locals module
into  the global namespace  like this is entirely optional. If you choose
not to  import it, all the members  of locals are always available in the
<i>pygame</i>   module.<br>
      <br>
    Lastly, we decide to print a nice warning message if the font or sound
modules in pygame are not available.<br>
       <br>
           
<h2>Loading Resources</h2>
    Here we have two functions we can use to load images and sounds. We will
  look at each function individually in this section.<br>
    <br>
         
<table border="1" bgcolor="#ddcc88">
       <tbody>
         <tr>
           <td>        
<pre>def load_image(name, colorkey=None):
    fullname = os.path.join('data', name)
    try:
        image = pygame.image.load(fullname)
    except pygame.error, message:
        print 'Cannot load image:', name
        raise SystemExit, message
    image = image.convert()
    if colorkey is not None:
        if colorkey is -1:
            colorkey = image.get_at((0,0))
        image.set_colorkey(colorkey, RLEACCEL)
    return image, image.get_rect()
           </td>
         </tr>
                   
  </tbody>     
</table>
     <br>
      This function takes the name of an image to load. It also optionally
 takes  an argument it can use to set a colorkey for the image. A colorkey
 is used  in graphics to represent a color of the image that is transparent.<br>
    <br>
    The first thing this function does is create a full pathname to the file.
  In this example all the resources are in a "data" subdirectory. By using
 the os.path.join function, a pathname will be created that works for whatever
  platform the game is running on.<br>
    <br>
    Next we load the image using the pygame.image.load function. We wrap
this   function in a try/except block, so if there is a problem loading the
image,   we can exit gracefully. After the image is loaded, we make an important
call  to the convert() function. This makes a new copy of a Surface and converts
  its color format and depth to match the display. This means blitting the
 image to the screen will happen as quickly as possible.<br>
    <br>
    Last, we set the colorkey for the image. If the user supplied an argument
  for the colorkey argument we use that value as the colorkey for the image.
  This would usually just be a color RGB value, like (255, 255, 255) for
white.   You can also pass a value of -1 as the colorkey. In this case the
function   will lookup the color at the topleft pixel of the image, and use
that color   for the colorkey.<br>
        <br>
       
<table border="1" bgcolor="#ddcc88">
      <tbody>
        <tr><td>
<pre>def load_sound(name):
    class NoneSound:
        def play(self): pass
    if not pygame.mixer:
        return NoneSound()
    fullname = os.path.join('data', name)
    try:
        sound = pygame.mixer.Sound(fullname)
    except pygame.error, message:
        print 'Cannot load sound:', wav
        raise SystemExit, message
    return sound</pre>
          </td>
        </tr>
               
  </tbody>    
</table>
    <br>
    Next is the function to load a sound file. The first thing this function
  does is check to see if the pygame.mixer module was imported correctly.
If  not, it returns a small class instance that has a dummy play method.
This  will act enough like a normal Sound object for this game to run without
any  extra error checking.<br>
    <br>
    This function is similar to the image loading function, but handles some
  different problems. First we create a full path to the sound image, and
load  the sound file inside a try/except block. Then we simply return the
loaded  Sound object.<br>
    <br>
       
<h2>Game Object Classes</h2>
    Here we create two classes to represent the objects in our game. Almost 
 all the logic for the game goes into these two classes. We will look over 
 them one at a time here.<br>
    <br>
       
<table border="1" bgcolor="#ddcc88">
      <tbody>
        <tr>
          <td>                            
<pre>class Fist(pygame.sprite.Sprite):
    """moves a clenched fist on the screen, following the mouse"""
    def __init__(self):
        pygame.sprite.Sprite.__init__(self) #call Sprite initializer
        self.image, self.rect = load_image('fist.bmp', -1)
        self.punching = 0

    def update(self):
        "move the fist based on the mouse position"
        pos = pygame.mouse.get_pos()
        self.rect.midtop = pos
        if self.punching:
            self.rect.move_ip(5, 10)

    def punch(self, target):
        "returns true if the fist collides with the target"
        if not self.punching:
            self.punching = 1
            hitbox = self.rect.inflate(-5, -5)
            return hitbox.colliderect(target.rect)

    def unpunch(self):
        "called to pull the fist back"
        self.punching = 0</pre>
          </td>
        </tr>
               
  </tbody>    
</table>
    <br>
    Here we create a class to represent the players fist. It is derived from
  the Sprite class included in the pygame.sprite module. The __init__ function
  is called when new instances of this class are created. The first thing
we  do is be sure to call the __init__ function for our base class. This
allows  the Sprite's __init__ function to prepare our object for use as a
sprite.  This game uses one of the sprite drawing Group classes. These classes
can  draw sprites that have an "image" and "rect" attribute. By simply changing
  these two attributes, the renderer will draw the current image at the current
  position.<br>
    <br>
    All sprites have an update() method. This function is typically called
 once  per frame. It is where you should put code that moves and updates
the  variables  for the sprite. The update() method for the fist moves the
fist  to the location  of the mouse pointer. It also offsets the fist position
slightly if the fist  is in the "punching" state.<br>
    <br>
    The following two functions punch() and unpunch() change the punching 
state  for the fist. The punch() method also returns a true value if the fist
is  colliding with the given target sprite.<br>
    <br>
       
<table border="1" bgcolor="#ddcc88">
      <tbody>
        <tr>
          <td>
<pre>class Chimp(pygame.sprite.Sprite):
    """moves a monkey critter across the screen. it can spin the
       monkey when it is punched."""
    def __init__(self):
        pygame.sprite.Sprite.__init__(self) #call Sprite intializer
        self.image, self.rect = load_image('chimp.bmp', -1)
        screen = pygame.display.get_surface()
        self.area = screen.get_rect()
        self.rect.topleft = 10, 10
        self.move = 9
        self.dizzy = 0

    def update(self):
        "walk or spin, depending on the monkeys state"
        if self.dizzy:
            self._spin()
        else:
            self._walk()

    def _walk(self):
        "move the monkey across the screen, and turn at the ends"
        newpos = self.rect.move((self.move, 0))
        if not self.area.contains(newpos):
	if self.rect.left &lt; self.area.left or \
		self.rect.right &gt; self.area.right:
            self.move = -self.move
            newpos = self.rect.move((self.move, 0))
            self.image = pygame.transform.flip(self.image, 1, 0)
        self.rect = newpos

    def _spin(self):
        "spin the monkey image"
        center = self.rect.center
        self.dizzy += 12
        if self.dizzy >= 360:
            self.dizzy = 0
            self.image = self.original
        else:
            rotate = pygame.transform.rotate
            self.image = rotate(self.original, self.dizzy)
        self.rect = self.image.get_rect(center=center)

    def punched(self):
        "this will cause the monkey to start spinning"
        if not self.dizzy:
            self.dizzy = 1
            self.original = self.image</pre>
      </td>
        </tr>
               
  </tbody>    
</table>
    <br>
    The chimp class is doing a little more work than the fist, but nothing
 more  complex. This class will move the chimp back and forth across the
screen.   When the monkey is punched, he will spin around to exciting effect.
This  class is also derived from the base Sprite class, and is initialized
the same as the fist. While initializing, the class also sets the attribute
"area"  to be the size of the display screen.<br>
    <br>
    The update function for the chimp simply looks at the current "dizzy" 
state,  which is true when the monkey is spinning from a punch. It calls either
the  _spin or _walk method. These functions are prefixed with an underscore.
 This  is just a standard python idiom which suggests these methods should
 only be used by the Chimp class. We could go so far as to give them a double
 underscore,  which would tell python to really try to make them private
methods,  but we  don't need such protection. :)<br>
    <br>
    The walk method creates a new position for the monkey by moving the current
  rect by a given offset. If this new position crosses outside the display
 area of the screen, it reverses the movement offset. It also mirrors the
image using the pygame.transform.flip function. This is a crude effect that
makes the monkey look like he's turning the direction he is moving.<br>
    <br>
    The spin method is called when the monkey is currently "dizzy". The dizzy
  attribute is used to store the current amount of rotation. When the monkey
  has rotated all the way around (360 degrees) it resets the monkey image
back  to the original unrotated version. Before calling the transform.rotate
function,  you'll see the code makes a local reference to the function simply
named "rotate". There is no need to do that for this example, it is just
done here to keep the following line's length a little shorter. Note that
when calling the rotate function, we are always rotating from the original
monkey image. When rotating, there is a slight loss of quality. Repeatedly
rotating the same image and the quality would get worse each time. Also,
when rotating an image, the size of the image will actually change. This
is because the corners of the image will be rotated out, making the image
bigger. We make sure the center of the new image matches the center of the
old image, so it rotates without moving.<br>
    <br>
    The last method is punched() which tells the sprite to enter its dizzy
 state.  This will cause the image to start spinning. It also makes a copy
 of the current image named "original".<br>
           
<h2>Initialize Everything</h2>
       Before we can do much with pygame, we need to make sure its modules
 are  initialized. In this case we will also open a simple graphics window.
 Now  we are in the main() function of the program, which actually runs everything.<br>
       <br>
         
<table border="1" bgcolor="#ddcc88">
       <tbody>
         <tr>
           <td>                                   
      <pre>pygame.init()
screen = pygame.display.set_mode((468, 60))
pygame.display.set_caption('Monkey Fever')
pygame.mouse.set_visible(0)</pre>
           </td>
         </tr>
                   
  </tbody>     
</table>
     <br>
       The first line to initialize <i>pygame</i> takes care of a bit of
work   for us. It checks through the imported <i>pygame</i> modules and attempts 
  to initialize each one of them. It is possible to go back and check if modules
  failed to initialize, but we won't bother here. It is also possible to
take   a lot more control and initialize each specific module by hand. That
type   of control is generally not needed, but is available if you desire.<br>
      <br>
      Next we set up the display graphics mode. Note that the pygame.display
  module is used to control all the display settings. In this case we are
asking  for a simple skinny window. There is an entire separate tutorial
on setting  up the graphics mode, but if we really don't care, <i>pygame</i>
  will do a good job of getting us something that works. Pygame will pick
the best color depth, since we haven't provided one.<br>
      <br>
      Last we set the window title and turn off the mouse cursor for our
window.   Very basic to do, and now we have a small black window ready to
do our bidding.  Usually the cursor defaults to visible, so there is no need
to really set  the state unless we want to hide it.<br>
      <br>
       <br>
           
<h2>Create The Background</h2>
       Our program is going to have text message in the background. It would
  be nice for us to create a single surface to represent the background and
  repeatedly use that. The first step is to create the surface.<br>
       <br>
         
<table border="1" bgcolor="#ddcc88">
       <tbody>
         <tr>
           <td>                                   
      <pre>background = pygame.Surface(screen.get_size())
background = background.convert()
background.fill((250, 250, 250))</pre>
           </td>
         </tr>
                   
  </tbody>     
</table>
     <br>
       This creates a new surface for us that is the same size as the display
  window. Note the extra call to convert() after creating the Surface. The
 convert with no arguments will make sure our background is the same format
 as the display window, which will give us the fastest results.<br>
      <br>
      We also fill the entire background with a solid white-ish color. Fill 
 takes  an RGB triplet as the color argument.<br>
      <br>
       <br>
           
<h2>Put Text On The Background, Centered</h2>
       Now that we have a background surface, lets get the text rendered
to  it. We only do this if we see the pygame.font module has imported properly. 
 If not, we just skip this section.<br>
       <br>
         
<table border="1" bgcolor="#ddcc88">
      <tbody>
        <tr>
          <td>                            
<pre>if pygame.font:
    font = pygame.font.Font(None, 36)
    text = font.render("Pummel The Chimp, And Win $$$", 1, (10, 10, 10))
    textpos = text.get_rect(centerx=background.get_width()/2)
    background.blit(text, textpos)</pre>
</td>
         </tr>
                   
  </tbody>     
</table>
     <br>
       As you see, there are a couple steps to getting this done. First we
 must  create the font object and render it into a new surface. We then find
 the  center of that new surface and blit (paste) it onto the background.<br>
      <br>
      The font is created with the font module's Font() constructor. Usually
  you will pass the name of a truetype font file to this function, but we
can  also pass None, which will use a default font. The Font constructor
also needs to know the size of font we want to create.<br>
      <br>
      We then render that font into a new surface. The render function creates
   a new surface that is the appropriate size for our text. In this case
we   are also telling render to create antialiased text (for a nice smooth
look)   and to use a dark grey color.<br>
      <br>
      Next we need to find the centered position of the text on our display.
  We create a "Rect" object from the text dimensions, which allows us to
easily   assign it to the screen center.<br>
      <br>
      Finally we blit (blit is like a copy or paste) the text onto the background
   image.<br>
      <br>
       <br>
           
<h2>Display The Background While Setup Finishes</h2>
       We still have a black window on the screen. Lets show our background 
 while  we wait for the other resources to load.<br>
       <br>
         
<table border="1" bgcolor="#ddcc88">
       <tbody>
         <tr>
           <td>                                   
      <pre>screen.blit(background, (0, 0))
pygame.display.flip()<br></pre>
           </td>
         </tr>
                   
  </tbody>     
</table>
     <br>
       This will blit our entire background onto the display window. The
blit   is self explanatory, but what about this flip routine?<br>
      <br>
      In pygame, changes to the display surface are not immediately visible.
  Normally, a display must be updated in areas that have changed for them
to  be visible to the user. With double buffered displays the display must
be  swapped (or flipped) for the changes to become visible. In this case
the flip() function works nicely because it simply handles the entire window
area and handles both singlebuffered and doublebufferes surfaces.<br>
      <br>
       <br>
           
<h2>Prepare Game Object</h2>
    Here we create all the objects that the game is going to need.<br>
       <br>
         
<table border="1" bgcolor="#ddcc88">
       <tbody>
         <tr>
           <td>                                   
<pre>whiff_sound = load_sound('whiff.wav')
punch_sound = load_sound('punch.wav')
chimp = Chimp()
fist = Fist()
allsprites = pygame.sprite.RenderPlain((fist, chimp))
clock = pygame.time.Clock()</pre>
           </td>
         </tr>
                   
  </tbody>     
</table>
     <br>
    First we load two sound effects using the load_sound function we defined
  above. Then we create an instance of each of our sprite classes. And lastly
  we create a sprite Group which will contain all our sprites.<br>
      <br>
    We actually use a special sprite group named RenderPlain. This sprite 
group  can draw all the sprites it contains to the screen. It is called RenderPlain
  because there are actually more advanced Render groups. But for our game,
  we just need simple drawing. We create the group named "allsprites" by
passing   a list with all the sprites that should belong in the group. We
could later   on add or remove sprites from this group, but in this game
we won't need  to.<br>
      <br>
    The clock object we create will be used to help control our game's framerate.
we will use it in the main loop of our game to make sure it doesn't run too fast.
    <br>
       <br>
              
<h2>Main Loop</h2>
       Nothing much here, just an infinite loop.<br>
       <br>
         
<table border="1" bgcolor="#ddcc88">
       <tbody>
         <tr>
           <td>                                   
      <pre>while 1:
    clock.tick(60)</pre>
           </td>
         </tr>
                   
  </tbody>     
</table>
     <br>
       All games run in some sort of loop. The usual order of things is to
 check  on the state of the computer and user input, move and update the
state  of  all the objects, and then draw them to the screen. You'll see
that this  example  is no different.<br>
      <br>
  We also make a call to our clock object, which will make sure our game
doesn't run faster than 60 frames per second.<br>
      <br>
       <br>
           
<h2>Handle All Input Events</h2>
       This is an extremely simple case of working the event queue.<br>
       <br>
         
<table border="1" bgcolor="#ddcc88">
       <tbody>
         <tr>
           <td>                                   
<pre>for event in pygame.event.get():
    if event.type == QUIT:
        return
    elif event.type == KEYDOWN and event.key == K_ESCAPE:
        return
    elif event.type == MOUSEBUTTONDOWN:
        if fist.punch(chimp):
            punch_sound.play() #punch
            chimp.punched()
        else:
            whiff_sound.play() #miss
    elif event.type == MOUSEBUTTONUP:
        fist.unpunch()</pre>
           </td>
         </tr>
                   
  </tbody>     
</table>
     <br>
   First we get all the available Events from pygame and loop through each
 of them. The first two tests see if the user has quit our game, or pressed
 the escape key. In these cases we just return from the main() function and
 the program cleanly ends.<br>
      <br>
   Next we just check to see if the mouse button was pressed or released. 
If  the button was pressed, we ask the fist object if it has collided with 
the  chimp. We play the appropriate sound effect, and if the monkey was hit, 
we  tell him to start spinning (by calling his punched() method).<br>
      <br>
       <br>
           
<h2>Update the Sprites</h2>
   <br>
         
<table border="1" bgcolor="#ddcc88">
       <tbody>
         <tr>
           <td>                                   
      <pre>allsprites.update()</pre>
           </td>
         </tr>
                   
  </tbody>     
</table>
     <br>
   Sprite groups have an update() method, which simply calls the update method 
 for all the sprites it contains. Each of the objects will move around, depending 
 on which state they are in. This is where the chimp will move one step side 
 to side, or spin a little farther if he was recently punched.<br>
      <br>
       <br>
   <br>
                
<h2>Draw The Entire Scene</h2>
   Now that all the objects are in the right place, time to draw them.<br>
       <br>
         
<table border="1" bgcolor="#ddcc88">
       <tbody>
         <tr>
           <td>                                   
<pre>screen.blit(background, (0, 0))
allsprites.draw(screen)
pygame.display.flip()</pre>
           </td>
         </tr>
                   
  </tbody>     
</table>
     <br>
   The first blit call will draw the background onto the entire screen. This 
 erases everything we saw from the previous frame (slightly inefficient, but
 good enough for this game). Next we call the draw() method of the sprite 
container. Since this sprite container is really an instance of the "DrawPlain" 
sprite group, it knows how to draw our sprites. Lastly, we flip() the contents 
of pygame's software double buffer to the screen. This makes everything we've 
 drawn visible all at once.<br>
   <br>
      <br>
           
<h2>Game Over</h2>
       User has quit, time to clean up<br>
      <br>
      Cleaning up the running game in <i>pygame</i> is extremely simple.
In  fact  since all variables are automatically destructed, we really don't 
have  to  do anything.<br>
      <br>
         
</body>
</html>

------------4lO21l3WceamgGtdY183DO
Content-Disposition: inline; filename=chimpshot.gif
Content-Type: image/gif; name=chimpshot.gif
Content-Location: http://pygame.info/docs/tut/chimp/chimpshot.gif
Content-Transfer-Encoding: Base64

R0lGODdh1AE8AOcAAAACAHh6d7u9uj0+PCIkIt7g3fN9fpN2gVlbWJudmt2xtLyU
nBUXFG9ZY1I+R/b0+E5QTUo0ODovOoqMiUs/SzAxL8zOy6qsqG1vbA0PDMykraSG
kQgLB3pmdGFMVYR6jPPa3uHMz1pNWToyN2ZgdoNjZPn7+GNkYvpAQZSGk4GDgBsd
GrO1ste9xObo5ZOVkn5hW9bY1XVpeERGQ/PKzFVXVLeLiTk6OMTGw5Ryc0k5Oywt
K21qeWRLSgsEAnFXVomDjsSbpNiqqLWFiqOlolxEQ0M1PMKxuenc3FNHU8GOjvzu
77mzwOSvr4VmbJOQoLStuVI8QKCbqnReZ6uIica9xYaBgNbL0Pjr7I54e6KAgb2P
mdOhpo6JiPDt8tLGxnJ0cWJeXfHz72pdah8XF52Xoh8gHmxnZqGcm1lVVEIyNeS6
vcmYnbeysSAcG9erricpJpx/iuXj5xoWFcfI0v8cHYlwdWNGTEtGRTs2NYp0fRMV
EuHU1JNudtLNzPxeXMrEw62msp2Yln5fZTQsMa+qqUk7QhobGYaIhX6AfX90dOzu
6jQ2M2JWYq6wrcehnL+ys1pFTlZARPe6vF9hXnBracK9u8ugo72MkVBMSp+hnkJE
QbeTlItoZJWJiey5vqJ5fPz++rGNl/T289LU0WZoZePl4pNzeuLd2551eMDCv9el
qq2Ki9rc2VA/QcOSl6N8hXxcXdyop4+RjsnLyEY4P+3V10pMSWxSUsOZnEQnJPv1
9Mi7uzstNOCutLisrHVkZnRcYGdQVBASD39pcvbe20c3OVZIT09BR3RPUvG+w+7o
5xcZF82coaqDjK2goW9XW6eppuq1tJ53gIxtcwsNCr2TlZV+iLWDg7SKjVdJUJaY
lauChZWQjtnT0qd+gaGVlqaSnba4tWZRWlZCSj87OsmVlZKMi+nr6Kyuq5x8g6ah
oFo+RItqa4NvfXZ4dc/RzkhJR3ljbAQHApFuauazuFZYVvbY1l1fXGtUWD9BPubI
xuHj4MfJxlpDR0A4PSwAAAAA1AE8AEAI/gBNCBxIsKDBgwgTKlzIsKHDhxAjSpxI
saLFixgzatzIsaPHgaFCihxJsqTJkwIHZFi5slo1lhwyWDhJs6bNmzhNCtyWwSUY
nfZYCh3KgZmJCz052MvJdKQJKxxcuuwp9aWAkEeTLkV5ouW6pmDDhhJ44uVKDmbE
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
vcpQpepS9gm9ZUtIrN83p2HCDQgAOw==

------------4lO21l3WceamgGtdY183DO--
